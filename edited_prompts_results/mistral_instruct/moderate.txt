============================= test session starts ==============================
platform darwin -- Python 3.12.10, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/silakekulluoglu/Desktop/hey/BLG475E-Phase1
collected 85 items

user_tests/mistral_instruct/moderate/human_eval_107_test.py ........     [  9%]
user_tests/mistral_instruct/moderate/human_eval_115_test.py ..........   [ 21%]
user_tests/mistral_instruct/moderate/human_eval_132_test.py .FF.F...FF.  [ 34%]
user_tests/mistral_instruct/moderate/human_eval_13_test.py .......       [ 42%]
user_tests/mistral_instruct/moderate/human_eval_148_test.py ..........   [ 54%]
user_tests/mistral_instruct/moderate/human_eval_21_test.py ........      [ 63%]
user_tests/mistral_instruct/moderate/human_eval_36_test.py .......       [ 71%]
user_tests/mistral_instruct/moderate/human_eval_51_test.py ..........    [ 83%]
user_tests/mistral_instruct/moderate/human_eval_68_test.py ..........    [ 95%]
user_tests/mistral_instruct/moderate/human_eval_75_test.py .FFF          [100%]

=================================== FAILURES ===================================
________________________ TestIsNested.test_empty_string ________________________

self = <human_eval_132_test.TestIsNested testMethod=test_empty_string>

    def test_empty_string(self):
>       self.assertFalse(is_nested(''))  # No brackets at all

user_tests/mistral_instruct/moderate/human_eval_132_test.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = ''

    def is_nested(string):
        stack = []
    
        for char in string:
            # If we find an opening bracket, push it onto the stack.
            if char == '[':
                stack.append(char)
            # If we find a closing bracket, check if the stack is empty or if the top element on the stack is not an opening bracket.
            elif char == ']':
                # If the stack is empty, it means there are closed brackets without any corresponding opening brackets, so return False.
                if not stack:
                    return False
                # Pop the top element from the stack and compare it with the closing bracket.
                last_opening = stack.pop()
                # If the top element is an opening bracket, push it back onto the stack (as a sentinel value) because there's no corresponding closing bracket yet.
                if last_opening == '[':
                    stack.append(last_opening)
                else:
                    # If the top element is a closing bracket, check if it has a matching opening bracket in the stack.
                    if last_opening != ']':
                        # If there's no more nested closed brackets (i.e., the current closing bracket doesn't have a corresponding opening bracket), return False.
                        while stack[-1] != '[':
                            stack.pop()
                    else:
                        # If there are still some nested closed brackets, continue processing the string.
                        if stack:
                            continue
        # If we've processed the entire string and the stack is empty or contains only opening brackets (as sentinel values), it means there are no nested closed brackets, so return False.
>       if stack or stack[-1] != '[':
E       IndexError: list index out of range

regenerated_codes/mistral_instruct/moderate/human_eval_132.py:35: IndexError
________________________ TestIsNested.test_long_nested _________________________

self = <human_eval_132_test.TestIsNested testMethod=test_long_nested>

    def test_long_nested(self):
>       self.assertTrue(is_nested('[[][][[]]]'))  # Nested multiple levels
E       AssertionError: False is not true

user_tests/mistral_instruct/moderate/human_eval_132_test.py:41: AssertionError
_______________________ TestIsNested.test_nested_complex _______________________

self = <human_eval_132_test.TestIsNested testMethod=test_nested_complex>

    def test_nested_complex(self):
>       self.assertTrue(is_nested('[[][]]'))  # Nested inside a bigger bracket
E       AssertionError: False is not true

user_tests/mistral_instruct/moderate/human_eval_132_test.py:26: AssertionError
_______________________ TestIsNested.test_partial_nested _______________________

self = <human_eval_132_test.TestIsNested testMethod=test_partial_nested>

    def test_partial_nested(self):
>       self.assertTrue(is_nested('[[]][['))  # Nested subsequence exists
E       AssertionError: False is not true

user_tests/mistral_instruct/moderate/human_eval_132_test.py:29: AssertionError
_______________________ TestIsNested.test_simple_nested ________________________

self = <human_eval_132_test.TestIsNested testMethod=test_simple_nested>

    def test_simple_nested(self):
>       self.assertTrue(is_nested('[[]]'))  # Nested brackets inside
E       AssertionError: False is not true

user_tests/mistral_instruct/moderate/human_eval_132_test.py:14: AssertionError
_____________________ TestIsMultiplyPrime.test_false_cases _____________________

self = <human_eval_75_test.TestIsMultiplyPrime testMethod=test_false_cases>

    def test_false_cases(self):
>       self.assertFalse(is_multiply_prime(60))  # 2 * 2 * 3 * 5 â†’ 4 primes
E       AssertionError: True is not false

user_tests/mistral_instruct/moderate/human_eval_75_test.py:18: AssertionError
_____________________ TestIsMultiplyPrime.test_true_cases ______________________

self = <human_eval_75_test.TestIsMultiplyPrime testMethod=test_true_cases>

    def test_true_cases(self):
        self.assertTrue(is_multiply_prime(30))
>       self.assertTrue(is_multiply_prime(105))
E       AssertionError: False is not true

user_tests/mistral_instruct/moderate/human_eval_75_test.py:14: AssertionError
________________ TestIsMultiplyPrime.test_with_repeated_primes _________________

self = <human_eval_75_test.TestIsMultiplyPrime testMethod=test_with_repeated_primes>

    def test_with_repeated_primes(self):
>       self.assertTrue(is_multiply_prime(27))   # 3 * 3 * 3
E       AssertionError: False is not true

user_tests/mistral_instruct/moderate/human_eval_75_test.py:30: AssertionError
=========================== short test summary info ============================
FAILED user_tests/mistral_instruct/moderate/human_eval_132_test.py::TestIsNested::test_empty_string
FAILED user_tests/mistral_instruct/moderate/human_eval_132_test.py::TestIsNested::test_long_nested
FAILED user_tests/mistral_instruct/moderate/human_eval_132_test.py::TestIsNested::test_nested_complex
FAILED user_tests/mistral_instruct/moderate/human_eval_132_test.py::TestIsNested::test_partial_nested
FAILED user_tests/mistral_instruct/moderate/human_eval_132_test.py::TestIsNested::test_simple_nested
FAILED user_tests/mistral_instruct/moderate/human_eval_75_test.py::TestIsMultiplyPrime::test_false_cases
FAILED user_tests/mistral_instruct/moderate/human_eval_75_test.py::TestIsMultiplyPrime::test_true_cases
FAILED user_tests/mistral_instruct/moderate/human_eval_75_test.py::TestIsMultiplyPrime::test_with_repeated_primes
========================= 8 failed, 77 passed in 0.13s =========================
