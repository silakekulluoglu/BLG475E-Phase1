============================= test session starts ==============================
platform darwin -- Python 3.12.10, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/silakekulluoglu/Desktop/BLG475E-Phase1-1
collected 10 items

tests/mistral_instruct/easy/human_eval_103_test.py F                     [ 10%]
tests/mistral_instruct/easy/human_eval_125_test.py F                     [ 20%]
tests/mistral_instruct/easy/human_eval_131_test.py F                     [ 30%]
tests/mistral_instruct/easy/human_eval_27_test.py F                      [ 40%]
tests/mistral_instruct/easy/human_eval_2_test.py F                       [ 50%]
tests/mistral_instruct/easy/human_eval_30_test.py .                      [ 60%]
tests/mistral_instruct/easy/human_eval_45_test.py .                      [ 70%]
tests/mistral_instruct/easy/human_eval_70_test.py F                      [ 80%]
tests/mistral_instruct/easy/human_eval_86_test.py F                      [ 90%]
tests/mistral_instruct/easy/human_eval_98_test.py F                      [100%]

=================================== FAILURES ===================================
_______________________ TestRoundedAvg.test_rounded_avg ________________________

self = <human_eval_103_test.TestRoundedAvg testMethod=test_rounded_avg>

    def test_rounded_avg(self):
>       self.assertEqual(rounded_avg(1, 5), "0b11")

tests/mistral_instruct/easy/human_eval_103_test.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 1, m = 5

    def rounded_avg(n, m):
        if not isinstance(n, int) or not isinstance(m, int):
            raise ValueError("Both n and m must be integers.")
        if n > m:
            return -1
>       average = sum(range(int(n), int(m) + 1) / (m - n + 1))
E       TypeError: unsupported operand type(s) for /: 'range' and 'int'

source/mistral_instruct/easy/human_eval_103.py:8: TypeError
_______________________ TestSplitWords.test_split_words ________________________

self = <human_eval_125_test.TestSplitWords testMethod=test_split_words>

    def test_split_words(self):
        self.assertEqual(split_words("Hello world!"), ["Hello", "world!"])
>       self.assertEqual(split_words("Hello,world!"), ["Hello", "world!"])
E       AssertionError: 4 != ['Hello', 'world!']

tests/mistral_instruct/easy/human_eval_125_test.py:7: AssertionError
____________________________ TestDigits.test_digits ____________________________

self = <human_eval_131_test.TestDigits testMethod=test_digits>

    def test_digits(self):
        self.assertEqual(digits(1), 1)
>       self.assertEqual(digits(4), 0)
E       AssertionError: 1 != 0

tests/mistral_instruct/easy/human_eval_131_test.py:7: AssertionError
_________________________ TestFlipCase.test_flip_case __________________________

self = <human_eval_27_test.TestFlipCase testMethod=test_flip_case>

    def test_flip_case(self):
        self.assertEqual(flip_case('Hello'), 'hELLO')
>       self.assertEqual(flip_case('HeLLo'), 'hEllo')
E       AssertionError: 'hEllO' != 'hEllo'
E       - hEllO
E       ?     ^
E       + hEllo
E       ?     ^

tests/mistral_instruct/easy/human_eval_27_test.py:8: AssertionError
___________________ TestTruncateNumber.test_truncate_number ____________________

self = <human_eval_2_test.TestTruncateNumber testMethod=test_truncate_number>

    def test_truncate_number(self):
        self.assertEqual(truncate_number(3.5), 0.5)
>       self.assertEqual(truncate_number(7.123), 0.123)
E       AssertionError: 0.12300000000000022 != 0.123

tests/mistral_instruct/easy/human_eval_2_test.py:9: AssertionError
__________________ TestStrangeSortList.test_strange_sort_list __________________

self = <human_eval_70_test.TestStrangeSortList testMethod=test_strange_sort_list>

    def test_strange_sort_list(self):
>       self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])

tests/mistral_instruct/easy/human_eval_70_test.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = [1, 2, 3, 4]

    def strange_sort_list(lst):
        sorted_lst = sorted(lst)
        result = []
        for i in range(len(sorted_lst)):
>           result.append(sorted_lst[i * 2])
E           IndexError: list index out of range

source/mistral_instruct/easy/human_eval_70.py:5: IndexError
______________________ TestAntiShuffle.test_anti_shuffle _______________________

self = <human_eval_86_test.TestAntiShuffle testMethod=test_anti_shuffle>

    def test_anti_shuffle(self):
        self.assertEqual(anti_shuffle('Hi'), 'Hi')
        self.assertEqual(anti_shuffle('hello'), 'ehllo')
>       self.assertEqual(anti_shuffle('Hello World!!!'), 'Hello !!!Wdlor')
E       AssertionError: 'Hello Wdlor' != 'Hello !!!Wdlor'
E       - Hello Wdlor
E       + Hello !!!Wdlor
E       ?       +++

tests/mistral_instruct/easy/human_eval_86_test.py:8: AssertionError
_______________________ TestCountUpper.test_count_upper ________________________

self = <human_eval_98_test.TestCountUpper testMethod=test_count_upper>

    def test_count_upper(self):
>       self.assertEqual(count_upper('aBCdEf'), 1)
E       AssertionError: 2 != 1

tests/mistral_instruct/easy/human_eval_98_test.py:8: AssertionError
=========================== short test summary info ============================
FAILED tests/mistral_instruct/easy/human_eval_103_test.py::TestRoundedAvg::test_rounded_avg
FAILED tests/mistral_instruct/easy/human_eval_125_test.py::TestSplitWords::test_split_words
FAILED tests/mistral_instruct/easy/human_eval_131_test.py::TestDigits::test_digits
FAILED tests/mistral_instruct/easy/human_eval_27_test.py::TestFlipCase::test_flip_case
FAILED tests/mistral_instruct/easy/human_eval_2_test.py::TestTruncateNumber::test_truncate_number
FAILED tests/mistral_instruct/easy/human_eval_70_test.py::TestStrangeSortList::test_strange_sort_list
FAILED tests/mistral_instruct/easy/human_eval_86_test.py::TestAntiShuffle::test_anti_shuffle
FAILED tests/mistral_instruct/easy/human_eval_98_test.py::TestCountUpper::test_count_upper
========================= 8 failed, 2 passed in 0.02s ==========================
