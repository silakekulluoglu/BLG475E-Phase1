[
    {
  "task_id": "HumanEval/132",
  "prompt": "\n\ndef is_nested(string):\n    '''\n    Given a string containing only the characters '[' and ']', return True if and only if\n    there is at least one properly nested bracket pair.\n\n    A bracket pair is \"nested\" exactly when you encounter a closing ']' while there are\n    two or more unmatched '[' that have not yet been closed.\n\n    Implementation requirements (use exactly this approach):\n      1. Initialize an integer counter `depth = 0`.\n      2. Scan the input left to right:\n         - On '[': increment `depth` by 1.\n         - On ']':\n             a. If `depth >= 2`, immediately return True (nested pair found).\n             b. Otherwise, decrement `depth` by 1 (but never below 0):\n                `depth = max(depth - 1, 0)`.\n      3. If you finish the scan without returning, return False.\n\n    Do not use lists of indices, stacks of positions, or two‐pointer matching.  Use only the\n    single `depth` variable and the above logic.\n\n    Examples:\n      >>> is_nested('[[]]')\n      True\n      >>> is_nested('[]')\n      False\n      >>> is_nested('[][]')\n      False\n      >>> is_nested('[[][]]')\n      True\n      >>> is_nested('[[]][[')\n      True\n      >>> is_nested('')\n      False\n      >>> is_nested('[[[[[[')\n      False\n      >>> is_nested(']]]]]]')\n      False\n    '''\n",
  "entry_point": "is_nested",
  "canonical_solution": "    depth = 0\n    for ch in string:\n        if ch == '[':\n            depth += 1\n        else:  # ch == ']'\n            if depth >= 2:\n                return True\n            depth = max(depth - 1, 0)\n    return False\n",
  "test": "def check(candidate):\n\n    # properly nested\n    assert candidate('[[]]') is True\n    assert candidate('[[[[]]]]') is True\n    assert candidate('[[][]]') is True\n    assert candidate('[[]][[') is True\n\n    # not nested\n    assert candidate('[]') is False\n    assert candidate('[][]') is False\n    assert candidate('') is False\n    assert candidate('[[[[[[') is False\n    assert candidate(']]]]]]') is False\n    assert candidate('[]]]]]]][[[[[]') is False\n\n"
}
]