[
    {
        "task_id": "HumanEval/13",
        "entry_point": "greatest_common_divisor",
        "Given two integers `a` and `b`, return their greatest common divisor (GCD) using the Euclidean algorithm. The result must always be a non-negative integer, regardless of the signs of `a` or `b`. If both inputs are zero, raise a ValueError. Examples: greatest_common_divisor(25, 15) => 5; greatest_common_divisor(3, 5) => 1; greatest_common_divisor(-9, 6) => 3; greatest_common_divisor(0, 0) => raises ValueError"
    },
    {
        "task_id": "HumanEval/21",
        "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "entry_point": "rescale_to_unit",
        "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "task_id": "HumanEval/36",
        "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "entry_point": "fizz_buzz",
        "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "task_id": "HumanEval/51",
        "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "entry_point": "remove_vowels",
        "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {        
        "task_id": "HumanEval/68",
        "entry_point": "pluck",
        "Given a list of non-negative integers, return the smallest even number in the list and its index in the format [value, index]. If there are multiple occurrences of the smallest even number, return the one with the lowest index. If the list is empty or contains no even numbers, return an empty list. If any element in the list is not a non-negative integer, raise a ValueError. Examples: pluck([4, 2, 3]) => [2, 1]; pluck([5, 0, 3, 0, 4, 2]) => [0, 1]; pluck([]) => []; pluck([1, 3, 5]) => []; pluck([1, -2, 3]) => raises ValueError; pluck([2.5, 4, 6]) => raises ValueError; pluck([\"2\", 4, 6]) => raises ValueError"
    },
    {
        "task_id": "HumanEval/75",
        "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "entry_point": "is_multiply_prime",
        "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "task_id": "HumanEval/107",
        "entry_point": "even_odd_palindrome",
        "Given a positive integer n (1 <= n <= 1000), return a tuple (even_count, odd_count) representing the number of even and odd palindromic integers from 1 to n (inclusive). A palindromic integer reads the same forwards and backwards. If n is out of bounds (i.e., less than 1 or greater than 1000), raise a ValueError. Examples: even_odd_palindrome(3) => (1, 2); even_odd_palindrome(12) => (4, 6); even_odd_palindrome(0) => raises ValueError; even_odd_palindrome(1001) => raises ValueError"
    },
    {
        "task_id": "HumanEval/115",
        "entry_point": "max_fill",
        "You are given a grid represented as a non-empty 2D list of integers, where each element is either 0 or 1, and a bucket with a fixed integer capacity between 1 and 10 inclusive. Each row in the grid represents a well, and each '1' in the row represents one unit of water. For each row, return the number of times the bucket must be used to remove all the water (using ceiling division). Return the total number of bucket operations across all rows. The grid must not be empty, must contain only rows of equal length, and must not exceed 50 rows or 50 columns. Each row must be non-empty. Raise a ValueError if the grid or any row is empty, the row lengths are inconsistent, the capacity is outside the 1â€“10 range, or any grid value is not 0 or 1. Examples: max_fill([[1,0,1],[0,1,0]], 2) => 2; max_fill([[]], 3) => raises ValueError; max_fill([[1]*9, [1]*10], 10) => raises ValueError; max_fill([[1, 0], [1, 1, 1]], 2) => raises ValueError"
    },
    {
        "task_id": "HumanEval/132",
        "entry_point": "is_nested",
        "Given a string consisting only of square brackets ('[' and ']'), return True if the string contains at least one nested pattern, defined as '[[]]'. A nested pattern is defined as one opening bracket '[' immediately followed at some later point by another '[' and then by two matching closing brackets, resulting in the structure '[[]]'. The string does not need to be balanced overall, and extra or unmatched brackets can appear outside the nested portion. However, the nested portion itself must be correctly formed. Examples: is_nested('[]') => False; is_nested('[[]]') => True; is_nested('[[]') => False; is_nested('[]]]]]]][[[[[]') => False; is_nested('[[[[[[[[') => False"
    },
    {
        "task_id": "HumanEval/148",
        "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "entry_point": "bf",
        "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    }
]